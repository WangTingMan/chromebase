# These files are generated by buildflag_header rule in Chromium.
# Instead, in libchrome, these are checked in.

--- /dev/null
+++ b/base/allocator/buildflags.h
@@ -0,0 +1,5 @@
+#ifndef BASE_ALLOCATOR_BUILDFLAGS_H_
+#define BASE_ALLOCATOR_BUILDFLAGS_H_
+#include "build/buildflag.h"
+#define BUILDFLAG_INTERNAL_USE_ALLOCATOR_SHIM() (0)
+#endif  // BASE_ALLOCATOR_BUILDFLAGS_H_
--- /dev/null
+++ b/base/android/java/src/org/chromium/base/BuildConfig.java
@@ -0,0 +1,21 @@
+// Copyright 2015 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+package org.chromium.base;
+
+/**
+ *  Build configuration. Generated on a per-target basis.
+ */
+public class BuildConfig {
+
+
+    public static final String FIREBASE_APP_ID = "";
+
+    public static final boolean DCHECK_IS_ON = false;
+
+    // The ID of the android string resource that stores the product version.
+    // This layer of indirection is necessary to make the resource dependency
+    // optional for android_apk targets/base_java (ex. for cronet).
+    public static final int R_STRING_PRODUCT_VERSION = 0;
+}
--- /dev/null
+++ b/base/cfi_buildflags.h
@@ -0,0 +1,7 @@
+// Generated by build/write_buildflag_header.py
+// From "base_debugging_flags"
+#ifndef BASE_CFI_BUILDFLAGS_H_
+#define BASE_CFI_BUILDFLAGS_H_
+#include "build/buildflag.h"
+#define BUILDFLAG_INTERNAL_CFI_ICALL_CHECK() (0)
+#endif  // BASE_CFI_BUILDFLAGS_H_
--- /dev/null
+++ b/base/debug/debugging_buildflags.h
@@ -0,0 +1,12 @@
+// Generated by build/write_buildflag_header.py
+// From "base_debugging_flags"
+#ifndef BASE_DEBUG_DEBUGGING_FLAGS_H_
+#define BASE_DEBUG_DEBUGGING_FLAGS_H_
+#include "build/buildflag.h"
+#define BUILDFLAG_INTERNAL_ENABLE_PROFILING() (0)
+#define BUILDFLAG_INTERNAL_ENABLE_MEMORY_TASK_PROFILER() (0)
+#define BUILDFLAG_INTERNAL_CAN_UNWIND_WITH_FRAME_POINTERS() (0)
+#define BUILDFLAG_INTERNAL_ENABLE_LOCATION_SOURCE() (0)
+#define BUILDFLAG_INTERNAL_CFI_ENFORCEMENT_TRAP() (0)
+#define BUILDFLAG_INTERNAL_ENABLE_MUTEX_PRIORITY_INHERITANCE() (0)
+#endif  // BASE_DEBUG_DEBUGGING_FLAGS_H_
--- /dev/null
+++ b/base/memory/protected_memory_buildflags.h
@@ -0,0 +1,7 @@
+// Generated by build/write_buildflag_header.py
+// From "base_debugging_flags"
+#ifndef BASE_PROTECTED_MEMORY_BUILDFLAGS_H_
+#define BASE_PROTECTED_MEMORY_BUILDFLAGS_H_
+#include "build/buildflag.h"
+#define BUILDFLAG_INTERNAL_USE_LLD() (0)
+#endif  // BASE_PROTECTED_MEMORY_BUILDFLAGS_H_
--- /dev/null
+++ b/base/synchronization/synchronization_buildflags.h
@@ -0,0 +1,4 @@
+#ifndef BASE_SYNCHRONIZATION_BUILDFLAGS_H_
+#define BASE_SYNCHRONIZATION_BUILDFLAGS_H_
+#include "build/buildflag.h"
+#endif  // BASE_SYNCHRONIZATION_BUILDFLAGS_H_
--- /dev/null
+++ b/ipc/ipc_buildflags.h
@@ -0,0 +1,8 @@
+#ifndef CPP_IPC_BUILDFLAGS_H_
+#define CPP_IPC_BUILDFLAGS_H_
+
+#include <build/buildflag.h>
+
+#define BUILDFLAG_INTERNAL_IPC_MESSAGE_LOG_ENABLED() (0)
+
+#endif // CPP_IPC_BUILDFLAGS_H_
--- /dev/null
+++ b/mojo/public/cpp/bindings/mojo_buildflags.h
@@ -0,0 +1,6 @@
+#ifndef CPP_MOJO_BUILD_FLAGS_H_
+#define CPP_MOJO_BUILD_FLAGS_H_
+
+#include <build/buildflag.h>
+#define BUILDFLAG_INTERNAL_MOJO_TRACE_ENABLED() (0)
+#endif // CPP_MOJO_BUILD_FLAGS_H_
